{"version":3,"sources":["../src/datasource.js"],"names":["_","IronDbCheckDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","checkUuid","jsonData","minRollup","parseInt","headers","basicAuth","length","cache","metrics","timestamp","doRequest","method","then","response","status","Error","data","message","title","error","console","query","kind","debug","now","Date","getTime","log","toISOString","Promise","resolve","metric","match","uuid","group","push","options","interval","intervalMs","start","range","from","valueOf","end","to","Math","round","floor","ceil","promises","targets","target","replace","scopedVars","fetchData","all","annotation","regionId","previousTrue","entry","object","time","text","encodeURIComponent","multiplier","result","datapoints","datasourceRequest","filter","map","refId","hide"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class IronDbCheckDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.checkUuid = instanceSettings.jsonData\n                  && instanceSettings.jsonData.checkUuid\n                  || '00000000-0000-0000-0000-000000000000';\n    this.minRollup = parseInt(instanceSettings.jsonData.minRollup) || 30;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    this.cache = {\n      metrics: null,\n      timestamp: 0\n    };\n  }\n\n  /* Test our datasource, we must have at least one metric for it to be successful */\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/raw/list_metrics',\n      method: 'GET'\n    }).then((response) => {\n      if (response.status != 200) throw new Error('Invalid status code ' + response.status);\n      if (response.data && response.data.length) {\n        return { status: \"success\", message: \"Data source has \" + response.data.length + \" metrics\", title: \"Success\" };\n      } else {\n        throw new Error('No metrics found for check ' + this.checkUuid);\n      }\n    }, (error) => {\n      console.error(\"Error testing datasource\", error);\n      throw new Error(\"Error testing data source, check the console\");\n    });\n  }\n\n  /* Find the metrics associated with our UUID of a specific kind */\n  metricFindQuery(query, kind) {\n    console.debug('Attempting to find metrics');\n\n    let now = new Date().getTime();\n    if ((this.cache.metrics != null) && ((now - this.cache.timestamp) < 60000)) {\n      console.log('Returning metrics cached at ' + new Date(this.cache.timestamp).toISOString());\n      return Promise.resolve(this.cache.metrics[this.checkUuid] || []);\n    }\n\n    return this.doRequest({\n      url: this.url + '/raw/list_metrics',\n      method: 'GET',\n    }).then((response) => {\n\n      let metrics = {};\n      for (let metric of response.data.metrics) {\n        let match = metric.match(/^([0-9a-fA-F]{4}(?:[0-9a-fA-F]{4}-){4}[0-9a-fA-F]{12})-(.*)$/);\n        if (! match) continue;\n\n        let uuid = match[1];\n        let name = match[2];\n\n        let group = metrics[uuid];\n        if (! group) group = metrics[uuid] = [];\n\n        group.push(name);\n      }\n\n      console.log('Caching metrics from', response.data, 'as', metrics);\n      this.cache.metrics = metrics;\n      this.cache.timestamp = new Date().getTime();\n\n      return metrics[this.checkUuid] || [];\n    });\n  }\n\n  /* Query IronDB for the metric data */\n  query(options) {\n\n    console.log('QUERY', options);\n\n    let interval = options.intervalMs;\n    let start = options.range.from.valueOf();\n    let end = options.range.to.valueOf();\n\n    interval = Math.round(interval / 1000);\n    if (interval < this.minRollup) interval = this.minRollup;\n    start = Math.floor(start / 1000 / interval) * interval;\n    end = Math.ceil(end / 1000 / interval) * interval;\n\n    console.log('start =', start, 'end =', end, 'interval =', interval);\n\n    let promises = [];\n    for (let target of options.targets) {\n      let metric = this.templateSrv.replace(target.target, options.scopedVars, 'regex');\n      promises.push(this.fetchData(metric, target.type, start, end, interval));\n      console.log('TARGET', target);\n    }\n\n    return this.q.all(promises).then((data) => {\n      return { data: data }\n    });\n  }\n\n  annotationQuery(options) {\n    console.log(\"ANN\", options);\n\n    let start = Math.floor(options.range.from.valueOf() / 1000);\n    let end = Math.ceil(options.range.to.valueOf() / 1000);\n\n    let name = options.annotation.name || 'Annotation';\n    let query = (options.annotation.query || null);\n\n    if (! query) return this.q.resolve([]);\n\n    let url = this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + query;\n\n    console.log(\"-->\", url, start, end, name, query);\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      let data = [];\n\n      let regionId = 1;\n      let previousTrue = null;\n\n      for (let entry of response.data) {\n        let object = { title: name, time: entry[0], text: entry[1] };\n\n        if (object.text == 'true') {\n          previousTrue = object;\n        } else if ((object.text == 'false') && (previousTrue != null)) {\n          previousTrue.regionId = object.regionId = (regionId ++);\n          delete previousTrue.text;\n          delete object.text;\n        } else previousTrue = null;\n\n        data.push(object);\n      }\n      console.log(\"ANNOTATIONS\", data);\n      return data;\n    });\n  }\n\n  /* ======================================================================== */\n\n  fetchData(metric, type, start, end, interval) {\n\n    let url = type == 'text' ?\n              this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + metric:\n              this.url + '/rollup/' + this.checkUuid + '/' + metric\n                       + '?start_ts=' + start\n                       + '&end_ts=' + end\n                       + '&rollup_span=' + interval + 's'\n                       + '&type=' + encodeURIComponent(type);\n    let multiplier = type == 'text' ? 1 : 1000;\n\n    let data = [];\n    let result = { target: metric, datapoints: data }\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      console.log('RESPONSE', response.data);\n      for (let entry of response.data) {\n        data.push([ entry[1], entry[0] * multiplier]);\n      }\n      if (type == 'text') {\n        console.log('INJECTING', [ data[data.length - 1], end]);\n        data.push([ data[data.length - 1][0], end * 1000]);\n      }\n      console.log('FETCHING', url, result);\n      return result;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}