{"version":3,"sources":["../src/datasource.js"],"names":["IronDbCheckDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","accountId","jsonData","checkUuid","minRollup","parseInt","headers","basicAuth","length","cache","metrics","timestamp","cached","now","Date","getTime","Promise","resolve","doRequest","params","query","method","then","response","status","Error","text","numeric","data","metric","split","push","metric_name","error","console","findMetrics","title","message","kind","debug","options","interval","intervalMs","start","range","from","valueOf","end","to","Math","round","floor","ceil","promises","targets","target","fetchData","replace","scopedVars","alias","all","annotation","regionId","previousTrue","entry","object","time","extend","encodeURIComponent","multiplier","result","datapoints","number","parseFloat","value","isNaN","datasourceRequest","_","filter","map","refId","hide"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\n\nexport class IronDbCheckDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.accountId = instanceSettings.jsonData\n                  && instanceSettings.jsonData.accountId\n                  || '0';\n    this.checkUuid = instanceSettings.jsonData\n                  && instanceSettings.jsonData.checkUuid\n                  || '00000000-0000-0000-0000-000000000000';\n    this.minRollup = parseInt(instanceSettings.jsonData.minRollup) || 30;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    this.cache = {\n      metrics: null,\n      timestamp: 0\n    };\n  }\n\n  /* List the metrics for this check UUID */\n  findMetrics(cached = true) {\n    let now = new Date().getTime();\n    if (cached && (this.cache.metrics != null) && ((now - this.cache.timestamp) < 600000)) {\n      // console.log('Returning metrics cached at ' + new Date(this.cache.timestamp).toISOString());\n      return Promise.resolve(this.cache.metrics);\n    }\n\n    return this.doRequest({\n      url: this.url + `/find/${this.accountId}/tags`,\n      params: { query: `and(__check_uuid:${this.checkUuid})` },\n      method: 'GET'\n    }).then((response) => {\n      if (response.status != 200) throw new Error('Invalid status code ' + response.status);\n\n      let metrics = { text: [], numeric: [] }\n\n      if (response.data && response.data.length) {\n        for (let metric of response.data) {\n          for (let type of metric.type.split(',')) {\n            if (! metrics[type]) metrics[type] = []\n            metrics[type].push(metric.metric_name)\n          }\n        }\n\n        // console.log(`Caching ${metrics.numeric.length} numeric and ${metrics.text.length} text metrics`)\n        this.cache.metrics = metrics\n        this.cache.timestamp = Date.now()\n      } else {\n        // console.log('Wiping cached data (no metrics)')\n        this.cache.metrics = null\n        this.cache.timestamp = 0\n      }\n\n      return metrics\n    }).catch((error) => {\n      console.error(\"Error testing datasource\", error);\n      throw new Error(\"Error testing data source, check the console\");\n    });\n  }\n\n  /* Test our datasource, we must have at least one metric for it to be successful */\n  testDatasource() {\n    return this.findMetrics(false).then((metrics) => {\n      return { status: \"success\", title: \"Success\",\n               message: `Found ${metrics.numeric.length} numeric and ${metrics.text.length} text metrics`\n             };\n    })\n  }\n\n  /* Find the metrics associated with our UUID of a specific kind */\n  metricFindQuery(query, kind) {\n    console.debug(`Attempting to find ${kind} metrics`, query);\n    return this.findMetrics().then((metrics) => {\n      return metrics[kind] || []\n    })\n  }\n\n  /* Query IronDB for the metric data */\n  query(options) {\n\n    // console.log('Running query', options);\n\n    let interval = options.intervalMs;\n    let start = options.range.from.valueOf();\n    let end = options.range.to.valueOf();\n\n    interval = Math.round(interval / 1000);\n    if (interval < this.minRollup) interval = this.minRollup;\n    start = Math.floor(start / 1000 / interval) * interval;\n    end = Math.ceil(end / 1000 / interval) * interval;\n\n    let promises = [];\n    for (let target of options.targets) {\n      if (target.target) {\n        promises.push(this.fetchData({\n          metric: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n          alias: this.templateSrv.replace(target.alias, options.scopedVars, 'regex'),\n          target, start, end, interval\n        }));\n      }\n    }\n\n    return this.q.all(promises).then((data) => {\n      return { data: data }\n    });\n  }\n\n  annotationQuery(options) {\n    // console.log(\"Annotations query\", options);\n\n    let start = Math.floor(options.range.from.valueOf() / 1000);\n    let end = Math.ceil(options.range.to.valueOf() / 1000);\n\n    let name = options.annotation.name || 'Annotation';\n    let query = (options.annotation.query || null);\n\n    if (! query) return this.q.resolve([]);\n\n    let url = this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + query;\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      let data = [];\n\n      let regionId = 1;\n      let previousTrue = null;\n\n      for (let entry of response.data) {\n        let object = { title: name, time: entry[0], text: entry[1] };\n\n        if (object.text == 'true') {\n          previousTrue = object;\n        } else if ((object.text == 'false') && (previousTrue != null)) {\n          previousTrue.regionId = object.regionId = (regionId ++);\n          delete previousTrue.text;\n          delete object.text;\n        } else previousTrue = null;\n\n        data.push(object);\n      }\n      // console.log(\"Annotations\", data);\n      return data;\n    });\n  }\n\n  /* ======================================================================== */\n\n  fetchData(options) {\n    let { metric, alias, target, start, end, interval } = options\n    let { kind, type, extend } = target\n    // Default behavior, before \"extend\" existed\n    if (!('extend' in target)) extend = true\n\n    // console.log('Fetch data', options)\n\n    let url = kind == 'text' ?\n              this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + metric:\n              this.url + '/rollup/' + this.checkUuid + '/' + metric\n                       + '?start_ts=' + start\n                       + '&end_ts=' + end\n                       + '&rollup_span=' + interval + 's'\n                       + '&type=' + encodeURIComponent(type);\n    let multiplier = kind == 'text' ? 1 : 1000;\n\n    let data = [];\n    let result = { target: alias || metric, datapoints: data }\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      // console.log('Fetch Data Response', response.data);\n\n      for (let entry of response.data) {\n        const number = parseFloat(entry[1])\n        const value = isNaN(number) ? entry[1] : number\n        data.push([ value, entry[0] * multiplier]);\n      }\n\n      if (extend && (kind == 'text') && (data.length > 0)) {\n        // console.log('Extending', [ data[data.length - 1][0], end]);\n        data.push([ data[data.length - 1][0], end * 1000]);\n      }\n\n      // console.log('Fetched', url, result);\n      return result;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== '';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"],"file":"datasource.js"}