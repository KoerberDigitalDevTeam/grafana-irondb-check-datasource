{"version":3,"sources":["../src/datasource.js"],"names":["IronDbCheckDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","accountId","jsonData","checkUuid","minRollup","parseInt","headers","basicAuth","length","cache","metrics","timestamp","cached","now","Date","getTime","console","log","toISOString","Promise","resolve","doRequest","params","query","method","then","response","status","Error","text","numeric","data","metric","split","push","metric_name","catch","error","findMetrics","title","message","kind","debug","options","interval","intervalMs","start","range","from","valueOf","end","to","Math","round","floor","ceil","promises","targets","target","replace","scopedVars","alias","fetchData","all","annotation","regionId","previousTrue","entry","object","time","encodeURIComponent","multiplier","result","datapoints","datasourceRequest","_","filter","map","refId","hide"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\n\nexport class IronDbCheckDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.accountId = instanceSettings.jsonData\n                  && instanceSettings.jsonData.accountId\n                  || '0';\n    this.checkUuid = instanceSettings.jsonData\n                  && instanceSettings.jsonData.checkUuid\n                  || '00000000-0000-0000-0000-000000000000';\n    this.minRollup = parseInt(instanceSettings.jsonData.minRollup) || 30;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    this.cache = {\n      metrics: null,\n      timestamp: 0\n    };\n  }\n\n  /* List the metrics for this check UUID */\n  findMetrics(cached = true) {\n    let now = new Date().getTime();\n    if (cached && (this.cache.metrics != null) && ((now - this.cache.timestamp) < 600000)) {\n      console.log('Returning metrics cached at ' + new Date(this.cache.timestamp).toISOString());\n      return Promise.resolve(this.cache.metrics);\n    }\n\n    return this.doRequest({\n      url: this.url + `/find/${this.accountId}/tags`,\n      params: { query: `and(__check_uuid:${this.checkUuid})` },\n      method: 'GET'\n    }).then((response) => {\n      if (response.status != 200) throw new Error('Invalid status code ' + response.status);\n\n      let metrics = { text: [], numeric: [] }\n\n      if (response.data && response.data.length) {\n        for (let metric of response.data) {\n          for (let type of metric.type.split(',')) {\n            if (! metrics[type]) metrics[type] = []\n            metrics[type].push(metric.metric_name)\n          }\n        }\n\n        console.log(`Caching ${metrics.numeric.length} numeric and ${metrics.text.length} text metrics`)\n        this.cache.metrics = metrics\n        this.cache.timestamp = Date.now()\n      } else {\n        console.log('Wiping cached data (no metrics)')\n        this.cache.metrics = null\n        this.cache.timestamp = 0\n      }\n\n      return metrics\n    }).catch((error) => {\n      console.error(\"Error testing datasource\", error);\n      throw new Error(\"Error testing data source, check the console\");\n    });\n  }\n\n  /* Test our datasource, we must have at least one metric for it to be successful */\n  testDatasource() {\n    return this.findMetrics(false).then((metrics) => {\n      return { status: \"success\", title: \"Success\",\n               message: `Found ${metrics.numeric.length} numeric and ${metrics.text.length} text metrics`\n             };\n    })\n  }\n\n  /* Find the metrics associated with our UUID of a specific kind */\n  metricFindQuery(query, kind) {\n    console.debug(`Attempting to find ${kind} metrics`, query);\n    return this.findMetrics().then((metrics) => {\n      return metrics[kind] || []\n    })\n  }\n\n  /* Query IronDB for the metric data */\n  query(options) {\n\n    console.log('QUERY', options);\n\n    let interval = options.intervalMs;\n    let start = options.range.from.valueOf();\n    let end = options.range.to.valueOf();\n\n    interval = Math.round(interval / 1000);\n    if (interval < this.minRollup) interval = this.minRollup;\n    start = Math.floor(start / 1000 / interval) * interval;\n    end = Math.ceil(end / 1000 / interval) * interval;\n\n    console.log('start =', start, 'end =', end, 'interval =', interval);\n\n    let promises = [];\n    for (let target of options.targets) {\n      if (target.target) {\n        let metric = this.templateSrv.replace(target.target, options.scopedVars, 'regex');\n        let alias = this.templateSrv.replace(target.alias, options.scopedVars, 'regex');\n        promises.push(this.fetchData(metric, alias, target.type, start, end, interval));\n      }\n    }\n\n    return this.q.all(promises).then((data) => {\n      return { data: data }\n    });\n  }\n\n  annotationQuery(options) {\n    console.log(\"ANN\", options);\n\n    let start = Math.floor(options.range.from.valueOf() / 1000);\n    let end = Math.ceil(options.range.to.valueOf() / 1000);\n\n    let name = options.annotation.name || 'Annotation';\n    let query = (options.annotation.query || null);\n\n    if (! query) return this.q.resolve([]);\n\n    let url = this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + query;\n\n    console.log(\"-->\", url, start, end, name, query);\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      let data = [];\n\n      let regionId = 1;\n      let previousTrue = null;\n\n      for (let entry of response.data) {\n        let object = { title: name, time: entry[0], text: entry[1] };\n\n        if (object.text == 'true') {\n          previousTrue = object;\n        } else if ((object.text == 'false') && (previousTrue != null)) {\n          previousTrue.regionId = object.regionId = (regionId ++);\n          delete previousTrue.text;\n          delete object.text;\n        } else previousTrue = null;\n\n        data.push(object);\n      }\n      console.log(\"ANNOTATIONS\", data);\n      return data;\n    });\n  }\n\n  /* ======================================================================== */\n\n  fetchData(metric, alias, type, start, end, interval) {\n\n    let url = type == 'text' ?\n              this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + metric:\n              this.url + '/rollup/' + this.checkUuid + '/' + metric\n                       + '?start_ts=' + start\n                       + '&end_ts=' + end\n                       + '&rollup_span=' + interval + 's'\n                       + '&type=' + encodeURIComponent(type);\n    let multiplier = type == 'text' ? 1 : 1000;\n\n    let data = [];\n    let result = { target: alias || metric, datapoints: data }\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      console.log('RESPONSE', response.data);\n      for (let entry of response.data) {\n        data.push([ entry[1], entry[0] * multiplier]);\n      }\n      if (type == 'text') {\n        console.log('INJECTING', [ data[data.length - 1], end]);\n        data.push([ data[data.length - 1][0], end * 1000]);\n      }\n      console.log('FETCHING', url, result);\n      return result;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== '';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"],"file":"datasource.js"}