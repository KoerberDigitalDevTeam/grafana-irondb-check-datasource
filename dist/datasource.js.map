{"version":3,"sources":["../src/datasource.js"],"names":["_","IronDbCheckDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","checkUuid","jsonData","minRollup","parseInt","headers","basicAuth","length","doRequest","method","then","response","status","Error","data","message","title","error","console","query","kind","interpolated","target","replace","metrics","metric","push","options","log","interval","intervalMs","start","range","from","valueOf","end","to","Math","round","floor","ceil","promises","targets","scopedVars","fetchData","all","annotation","resolve","entry","time","text","encodeURIComponent","multiplier","result","datapoints","datasourceRequest","filter","map","refId","hide"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class IronDbCheckDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.checkUuid = instanceSettings.jsonData\n                  && instanceSettings.jsonData.checkUuid\n                  || '00000000-0000-0000-0000-000000000000';\n    this.minRollup = parseInt(instanceSettings.jsonData.minRollup) || 30;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  /* Test our datasource, we must have at least one metric for it to be successful */\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/list/metric/' + this.checkUuid,\n      method: 'GET'\n    }).then((response) => {\n      if (response.status != 200) throw new Error('Invalid status code ' + response.status);\n      if (response.data && response.data.length) {\n        return { status: \"success\", message: \"Data source has \" + response.data.length + \" metrics\", title: \"Success\" };\n      } else {\n        throw new Error('No metrics found for check ' + this.checkUuid);\n      }\n    }, (error) => {\n      console.error(\"Error testing datasource\", error);\n      throw new Error(\"Error testing data source, check the console\");\n    });\n  }\n\n  /* Find the metrics associated with our UUID of a specific kind */\n  metricFindQuery(query, kind) {\n    query = query || '';\n    kind = kind || 'numeric';\n\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/list/metric/' + this.checkUuid,\n      method: 'GET',\n    }).then((response) => {\n      let metrics = [];\n      for (let metric of response.data) {\n        if (metric.type != kind) continue;\n        metrics.push(metric.metric);\n      }\n      return metrics;\n    });\n  }\n\n  /* Query IronDB for the metric data */\n  query(options) {\n\n    console.log('QUERY', options);\n\n    let interval = options.intervalMs;\n    let start = options.range.from.valueOf();\n    let end = options.range.to.valueOf();\n\n    interval = Math.round(interval / 1000);\n    if (interval < this.minRollup) interval = this.minRollup;\n    start = Math.floor(start / 1000 / interval) * interval;\n    end = Math.ceil(end / 1000 / interval) * interval;\n\n    console.log('start =', start, 'end =', end, 'interval =', interval);\n\n    let promises = [];\n    for (let target of options.targets) {\n      let metric = this.templateSrv.replace(target.target, options.scopedVars, 'regex');\n      promises.push(this.fetchData(metric, target.type, start, end, interval));\n      console.log('TARGET', target);\n    }\n\n    return this.q.all(promises).then((data) => {\n      return { data: data }\n    });\n  }\n\n  annotationQuery(options) {\n    console.log(\"ANN\", options);\n\n    let start = Math.floor(options.range.from.valueOf() / 1000);\n    let end = Math.ceil(options.range.to.valueOf() / 1000);\n\n    let name = options.annotation.name || 'Annotation';\n    let query = (options.annotation.query || null);\n\n    if (! query) return this.q.resolve([]);\n\n    let url = this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + query;\n\n    console.log(\"-->\", url, start, end, name, query);\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      let data = [];\n      for (let entry of response.data) {\n        data.push({ time: entry[0], text: entry[1]});\n      }\n      return data;\n    });\n  }\n\n  /* ======================================================================== */\n\n  fetchData(metric, type, start, end, interval) {\n\n    let url = type == 'text' ?\n              this.url + '/read/' + start + '/' + end + '/' + this.checkUuid + '/' + metric:\n              this.url + '/rollup/' + this.checkUuid + '/' + metric\n                       + '?start_ts=' + start\n                       + '&end_ts=' + end\n                       + '&rollup_span=' + interval + 's'\n                       + '&type=' + encodeURIComponent(type);\n    let multiplier = type == 'text' ? 1 : 1000;\n\n    let data = [];\n    let result = { target: metric, datapoints: data }\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then((response) => {\n      for (let entry of response.data) {\n        data.push([ entry[1], entry[0] * multiplier]);\n      }\n      console.log('FETCHING', url, result);\n      return result;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}